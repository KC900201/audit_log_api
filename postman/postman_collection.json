{
	"info": {
		"_postman_id": "bcdfb599-39f6-415e-9460-3f6a226677c3",
		"name": "Resola FastApi challenge",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2098690"
	},
	"item": [
		{
			"name": "root",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response contains the required field 'Hello'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('Hello');",
							"});",
							"",
							"",
							"pm.test(\"The value of 'Hello' must be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.Hello).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "get_log",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 403\", function () {",
							"    pm.expect(pm.response.code).to.eql(403);",
							"});",
							"",
							"",
							"pm.test(\"Response contains a detail field\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('detail');",
							"});",
							"",
							"",
							"pm.test(\"The detail field must be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.detail).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "payload",
							"value": "{        \r\n    \"sub\": \"user123\",\r\n    \"tenant_id\": \"f248d1ee-f3c7-458a-9c17-27cef4b89e38\",\r\n    \"role\": \"admin\"\r\n}\r\n",
							"type": "string"
						},
						{
							"key": "secret",
							"value": "sample-secret",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/api/v1/logs/",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"v1",
						"logs",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "get_log_stats",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.all.keys('total_logs', 'by_action', 'by_severity', 'last_7_days');",
							"});",
							"",
							"",
							"pm.test(\"Validate 'by_action' array contains objects with non-empty 'action_type' and non-negative 'count'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.by_action).to.be.an('array');",
							"    responseData.by_action.forEach(function(action) {",
							"        pm.expect(action).to.be.an('object');",
							"        pm.expect(action.action_type).to.exist.and.to.have.lengthOf.at.least(1, \"Action type should not be empty\");",
							"        pm.expect(action.count).to.be.a('number').and.to.be.at.least(0, \"Count should be non-negative\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Validate 'by_severity' array contains non-empty 'severity' and non-negative 'count'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.by_severity).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.by_severity.forEach(function(item) {",
							"        pm.expect(item).to.be.an('object');",
							"        pm.expect(item.severity).to.exist.and.to.have.lengthOf.at.least(1, \"Severity should not be empty\");",
							"        pm.expect(item.count).to.be.a('number').that.is.at.least(0, \"Count should be non-negative\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Validate that 'last_7_days' array contains objects with valid 'day' format and non-negative 'count'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.last_7_days).to.be.an('array');",
							"    ",
							"    responseData.last_7_days.forEach(function(item) {",
							"        pm.expect(item).to.be.an('object');",
							"        pm.expect(item.day).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Day should not be empty\");",
							"        pm.expect(item.count).to.exist.and.to.be.a('number').and.to.be.at.least(0, \"Count should be non-negative\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "payload",
							"value": "{        \r\n    \"sub\": \"user123\",\r\n    \"tenant_id\": \"f248d1ee-f3c7-458a-9c17-27cef4b89e38\",\r\n    \"role\": \"admin\"\r\n}\r\n",
							"type": "string"
						},
						{
							"key": "secret",
							"value": "sample-secret",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/api/v1/logs/stats",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"v1",
						"logs",
						"stats"
					]
				}
			},
			"response": []
		},
		{
			"name": "export_logs",
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "payload",
							"value": "{        \r\n    \"sub\": \"user123\",\r\n    \"tenant_id\": \"f248d1ee-f3c7-458a-9c17-27cef4b89e38\",\r\n    \"role\": \"admin\"\r\n}\r\n",
							"type": "string"
						},
						{
							"key": "secret",
							"value": "sample-secret",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/api/v1/logs/export",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"v1",
						"logs",
						"export"
					]
				}
			},
			"response": []
		},
		{
			"name": "create_log",
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "payload",
							"value": "{        \r\n    \"sub\": \"user123\",\r\n    \"tenant_id\": \"f248d1ee-f3c7-458a-9c17-27cef4b89e38\",\r\n    \"role\": \"admin\"\r\n}\r\n",
							"type": "string"
						},
						{
							"key": "secret",
							"value": "sample-secret",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"tenant_id\": \"f248d1ee-f3c7-458a-9c17-27cef4b89e38\",\r\n    \"user_id\": \"39aade39-82b4-4aff-8813-90694bf35571\", \r\n    \"session_id\": \"1236\",\r\n    \"ip_address\": \"127.0.0.1\",\r\n    \"user_agent\": \"user\",\r\n    \"action_type\": \"DELETE\",\r\n    \"resource_type\": \"db\",\r\n    \"resource_id\": \"10292\",\r\n    \"severity\": \"ERROR\",\r\n    \"before_state\": null,\r\n    \"after_state\": null,\r\n    \"metadata\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/v1/logs/",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"v1",
						"logs",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "create_logs_bulk",
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "payload",
							"value": "{        \r\n    \"sub\": \"user123\",\r\n    \"tenant_id\": \"f248d1ee-f3c7-458a-9c17-27cef4b89e38\",\r\n    \"role\": \"admin\"\r\n}\r\n",
							"type": "string"
						},
						{
							"key": "secret",
							"value": "sample-secret",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n  {\r\n    \"tenant_id\": \"f248d1ee-f3c7-458a-9c17-27cef4b89e38\",\r\n    \"user_id\":   \"39aade39-82b4-4aff-8813-90694bf35571\",\r\n    \"session_id\": \"sess-001\",\r\n    \"ip_address\": \"192.168.0.10\",\r\n    \"user_agent\": \"postman-runtime/7.28.0\",\r\n    \"action_type\": \"CREATE\",\r\n    \"resource_type\": \"order\",\r\n    \"resource_id\": \"ord-1001\",\r\n    \"severity\": \"INFO\",\r\n    \"before_state\": null,\r\n    \"after_state\": { \"status\": \"pending\", \"amount\": 99.95 },\r\n    \"metadata\": { \"source\": \"checkout\" }\r\n  },\r\n  {\r\n    \"tenant_id\": \"f248d1ee-f3c7-458a-9c17-27cef4b89e38\",\r\n    \"user_id\":   \"39aade39-82b4-4aff-8813-90694bf35571\",\r\n    \"session_id\": \"sess-002\",\r\n    \"ip_address\": \"192.168.0.11\",\r\n    \"user_agent\": \"postman-runtime/7.28.0\",\r\n    \"action_type\": \"CREATE\",\r\n    \"resource_type\": \"product\",\r\n    \"resource_id\": \"prod-2022\",\r\n    \"severity\": \"INFO\",\r\n    \"before_state\": { },\r\n    \"after_state\": { \"price\": 44.99 },\r\n    \"metadata\": { \"discount_code\": \"SUMMER22\" }\r\n  }\r\n]\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/v1/logs/bulk",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"v1",
						"logs",
						"bulk"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete_log",
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "payload",
							"value": "{        \r\n    \"sub\": \"user123\",\r\n    \"tenant_id\": \"f248d1ee-f3c7-458a-9c17-27cef4b89e38\",\r\n    \"role\": \"admin\"\r\n}\r\n",
							"type": "string"
						},
						{
							"key": "secret",
							"value": "sample-secret",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/api/v1/logs/cleanup/e234842a-47db-47d4-97b4-a99cc1c11cf4",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"v1",
						"logs",
						"cleanup",
						"e234842a-47db-47d4-97b4-a99cc1c11cf4"
					]
				}
			},
			"response": []
		},
		{
			"name": "update_log",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {",
							"    pm.expect(pm.response.code).to.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"Response has a Content-Type of application/json\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});",
							"",
							"",
							"pm.test(\"Response contains a detail field\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('detail');",
							"});",
							"",
							"",
							"pm.test(\"The detail field must be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.detail).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "payload",
							"value": "{        \r\n    \"sub\": \"user123\",\r\n    \"tenant_id\": \"f248d1ee-f3c7-458a-9c17-27cef4b89e38\",\r\n    \"role\": \"admin\"\r\n}\r\n",
							"type": "string"
						},
						{
							"key": "secret",
							"value": "sample-secret",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"tenant_id\": \"a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11\",\r\n    \"user_id\": \"f248d1ee-f3c7-458a-9c17-27cef4b89e38\",\r\n    \"session_id\": \"1239\",\r\n    \"ip_address\": \"127.0.0.1\",\r\n    \"user_agent\": \"admin\",\r\n    \"action_type\": \"DELETE\",\r\n    \"resource_type\": \"JSON\",\r\n    \"resource_id\": \"10290\",\r\n    \"severity\": \"WARNING\",\r\n    \"before_state\": {\"name\": \"Jason\"},\r\n    \"after_state\": {},\r\n    \"metadata\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/v1/logs/10e3050d-7480-454d-9346-fd8393d7c0ee",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"v1",
						"logs",
						"10e3050d-7480-454d-9346-fd8393d7c0ee"
					]
				}
			},
			"response": []
		},
		{
			"name": "search_tenant",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 403\", function () {",
							"    pm.expect(pm.response.code).to.equal(403);",
							"});",
							"",
							"",
							"pm.test(\"Response contains a detail field\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('detail');",
							"});",
							"",
							"",
							"pm.test(\"Detail field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.detail).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Detail should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the correct Content-Type header\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/api/v1/tenants/?status=active&name=Jay Lee",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"v1",
						"tenants",
						""
					],
					"query": [
						{
							"key": "status",
							"value": "active"
						},
						{
							"key": "name",
							"value": "Jay Lee"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "create_tenant",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 403\", function () {",
							"    pm.expect(pm.response.code).to.eql(403);",
							"});",
							"",
							"",
							"pm.test(\"Response contains a detail field\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('detail');",
							"});",
							"",
							"",
							"pm.test(\"Response has the correct Content-Type header\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
							"});",
							"",
							"",
							"pm.test(\"Response body is not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"The detail field must be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.detail).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "payload",
							"value": "{        \r\n    \"sub\": \"user123\",\r\n    \"tenant_id\": \"f248d1ee-f3c7-458a-9c17-27cef4b89e38\",\r\n    \"role\": \"admin\"\r\n}\r\n",
							"type": "string"
						},
						{
							"key": "secret",
							"value": "sample-secret",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Jay Lee\",\r\n    \"status\": \"inactive\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/v1/tenants/",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"v1",
						"tenants",
						""
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "http://localhost:8000",
			"type": "default"
		}
	]
}